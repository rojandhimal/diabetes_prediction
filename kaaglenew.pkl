{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Introduction\n",
    "This data set is include woman patients health features who is diabetes or not\n",
    "\n",
    "Content:\n",
    "1. [Load and Check Data](#1)\n",
    "1. [Numeric Variable](#2)\n",
    "1. [Outlier Detection](#3)\n",
    "1. [Missing Value](#4)\n",
    "    * [Find Missing Value](#5)\n",
    "    * [Fill Missing Value](#6)\n",
    "1. [Visualization](#7)\n",
    "    * [Glucose Mean -- Label](#8)\n",
    "    * [Insulin Mean -- Label](#9)\n",
    "    * [BMI Mean -- Label](#10)\n",
    "    * [BloodPressure Mean -- Label](#11)\n",
    "    * [Pregnancies Mean -- Label](#12)\n",
    "    * [SkinThickness Mean -- Label](#13)\n",
    "    * [Age Mean -- Label](#14)\n",
    "    * [DiabetesPedigreeFunction Mean -- Label](#15)\n",
    "1. [Modelling](#16)\n",
    "    * [Train - Test Split](#17)\n",
    "    * [Simple Logistid Regression](#18)\n",
    "    * [Hyperparameter Tuning -- Griid Search -- Cross Validation](#19)\n",
    "    * [Ensemble Modeling](#20)\n",
    "    * [Predict Test Data](#21)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"1\"></a><br>\n",
    "## Load and Check Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "data = pd.read_csv(\"diabetes.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',\n",
       "       'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Outcome feature is represent patients diabetes results\n",
    "* Lets change this to Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Outcome</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Outcome  \n",
       "0                     0.627   50        1  \n",
       "1                     0.351   31        0  \n",
       "2                     0.672   32        1  \n",
       "3                     0.167   21        0  \n",
       "4                     2.288   33        1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"Label\"] = data.Outcome.values\n",
    "data.drop(labels=[\"Outcome\"], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Label  \n",
       "0                     0.627   50      1  \n",
       "1                     0.351   31      0  \n",
       "2                     0.672   32      1  \n",
       "3                     0.167   21      0  \n",
       "4                     2.288   33      1  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "768"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There is 768 patients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "      <td>768.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>3.845052</td>\n",
       "      <td>120.894531</td>\n",
       "      <td>69.105469</td>\n",
       "      <td>20.536458</td>\n",
       "      <td>79.799479</td>\n",
       "      <td>31.992578</td>\n",
       "      <td>0.471876</td>\n",
       "      <td>33.240885</td>\n",
       "      <td>0.348958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>3.369578</td>\n",
       "      <td>31.972618</td>\n",
       "      <td>19.355807</td>\n",
       "      <td>15.952218</td>\n",
       "      <td>115.244002</td>\n",
       "      <td>7.884160</td>\n",
       "      <td>0.331329</td>\n",
       "      <td>11.760232</td>\n",
       "      <td>0.476951</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.078000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>27.300000</td>\n",
       "      <td>0.243750</td>\n",
       "      <td>24.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>117.000000</td>\n",
       "      <td>72.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>30.500000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0.372500</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>6.000000</td>\n",
       "      <td>140.250000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>127.250000</td>\n",
       "      <td>36.600000</td>\n",
       "      <td>0.626250</td>\n",
       "      <td>41.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>17.000000</td>\n",
       "      <td>199.000000</td>\n",
       "      <td>122.000000</td>\n",
       "      <td>99.000000</td>\n",
       "      <td>846.000000</td>\n",
       "      <td>67.100000</td>\n",
       "      <td>2.420000</td>\n",
       "      <td>81.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Pregnancies     Glucose  BloodPressure  SkinThickness     Insulin  \\\n",
       "count   768.000000  768.000000     768.000000     768.000000  768.000000   \n",
       "mean      3.845052  120.894531      69.105469      20.536458   79.799479   \n",
       "std       3.369578   31.972618      19.355807      15.952218  115.244002   \n",
       "min       0.000000    0.000000       0.000000       0.000000    0.000000   \n",
       "25%       1.000000   99.000000      62.000000       0.000000    0.000000   \n",
       "50%       3.000000  117.000000      72.000000      23.000000   30.500000   \n",
       "75%       6.000000  140.250000      80.000000      32.000000  127.250000   \n",
       "max      17.000000  199.000000     122.000000      99.000000  846.000000   \n",
       "\n",
       "              BMI  DiabetesPedigreeFunction         Age       Label  \n",
       "count  768.000000                768.000000  768.000000  768.000000  \n",
       "mean    31.992578                  0.471876   33.240885    0.348958  \n",
       "std      7.884160                  0.331329   11.760232    0.476951  \n",
       "min      0.000000                  0.078000   21.000000    0.000000  \n",
       "25%     27.300000                  0.243750   24.000000    0.000000  \n",
       "50%     32.000000                  0.372500   29.000000    0.000000  \n",
       "75%     36.600000                  0.626250   41.000000    1.000000  \n",
       "max     67.100000                  2.420000   81.000000    1.000000  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"2\"></a><br>\n",
    "## Variable Describe\n",
    "\n",
    "1. Pregnancies: Number of times pregnant\n",
    "1. Glucose: Plasma glucose concentration a 2 hours in an oral glucose tolerance test\n",
    "1. BloodPressure: Diastolic Blood Pressure (mm Hg)\n",
    "1. SkinThickness: Triceps skin fold thickness (mm)\n",
    "1. Insulin: 2-Hour serum insulin (mu U/ml)\n",
    "1. BMI: Body mass index (weight in kg/(height in m)^2)\n",
    "1. DiabetesPedigreeFunction: Diabetes pedigree function\n",
    "1. Age: Age (years)\n",
    "1. Outcome: Class variable (0 or 1) 268 of 768 are 1, the others are 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 768 entries, 0 to 767\n",
      "Data columns (total 9 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   Pregnancies               768 non-null    int64  \n",
      " 1   Glucose                   768 non-null    int64  \n",
      " 2   BloodPressure             768 non-null    int64  \n",
      " 3   SkinThickness             768 non-null    int64  \n",
      " 4   Insulin                   768 non-null    int64  \n",
      " 5   BMI                       768 non-null    float64\n",
      " 6   DiabetesPedigreeFunction  768 non-null    float64\n",
      " 7   Age                       768 non-null    int64  \n",
      " 8   Label                     768 non-null    int64  \n",
      "dtypes: float64(2), int64(7)\n",
      "memory usage: 54.1 KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* float64 (2): BMI, DıabetesPedigreeFunction\n",
    "* int64 (7): Pregnancies, Glucosei BloodPressure, SkinThickness, Insulin, Age, Outcome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"2\"></a><br>\n",
    "# Numerical Variable\n",
    "* This data set has not include categorical variable so lets look short the numerical variables"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_hist(variable):\n",
    "    plt.figure(figsize=(9,3))\n",
    "    plt.hist(data[variable], bins=40)\n",
    "    plt.xlabel(variable)\n",
    "    plt.ylabel(\"Frequancies\")\n",
    "    plt.title(f\"{variable} distrubition with hist\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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Hz+Oj48P77zzzk3z3/j9us7b25u5c+fy9ttvk56ejslkYvr06fj6+rJz506bt7tDhw589913NGvWjLJly1K/fn28vLzy9GDdOO24ceOYNGmSzcu3xWuvvUZYWBixsbE4OzvTvn17/va3v3Hp0iXc3Nzo1asXq1atyjdIS+llshT0Z4CIGJbZbGb+/Pm88cYblCtXjn379vHqq6+yadMm/ScvIiWWekpESiAPDw/KlClDr169cHFxwcXFhffee0+BRERKNPWUiIiIiCHoRFcRERExBIUSERERMQSFEhERETGEEnGia0G37RYREZGS6fotEG5UIkIJ5F88QFJSEg0aNHBwNfJXaofipzYwBrVD8VMbGENh7VBQZ4MO34iIiIghKJSIiIiIISiUiIiIiCEolIiIiIghKJSIiIiIISiUiIiIiCGUmEuC73UPh663edoj73S2YyUiIiLFQz0lIiIiYggKJSIiImIICiUiIiJiCAolIiIiYggKJSIiImIICiUiIiJiCAolIiIiYgh2CyW//PILQUFBABw9epT+/fszYMAAJk6cSG5uLgArV66kR48e9OnThx9//NFepYiIiEgJYJdQsmjRIsLDw8nIyABg+vTpBAcH8/nnn2OxWIiPj+fcuXMsXbqUmJgYFi9ezJw5c8jMzLRHOSIiIlIC2CWU1KhRgw8++MD6ft++ffj7+wPQpk0btmzZwu7du2nSpAmurq54enpSo0YN9u/fb49yREREpASwy23mAwMDOXHihPW9xWLBZDIB4O7uTmpqKmazGU9PT+s07u7umM3mApeZlJSU7/D09PQCx92rjLi9pbEdjEZtYAxqh+KnNjCG22kHhzz7xsnp/zpk0tLSqFChAh4eHqSlpeUZfmNI+asGDRrkOzwpKanAcSXLIZunNOL23jvtUHKpDYxB7VD81AbGUFg7JCYm5jvcIVffNGzYkISEBAA2btzIk08+SaNGjUhMTCQjI4PU1FQOHjxI3bp1HVGOiIiIGJBDekpCQkKIiIhgzpw5+Pn5ERgYiLOzM0FBQQwYMACLxcLo0aNxc3NzRDkiIiJiQHYLJdWrV2flypUA+Pr6smzZspum6dOnD3369LFXCSIiIlKC6OZpIiIiYggKJSIiImIICiUiIiJiCAolIiIiYggKJSIiImIICiUiIiJiCA65T0lp9HDo+uIuQUREpERR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NzcyMjIArE/4jY+Pt2uBIiIiUjrYFEqaNGlC9+7dadKkCb/99huLFy9mypQp9q5NREREShGbQsnBgwdp0qQJAPXq1eP06dO4urratTAREREpXWwKJZ6enrz33ns0atSIxMREHnzwQXvXJSIiIqWMTc++mT17Nh4eHmzatImHHnqIqVOn2rsuERERKWVsCiVubm54eXlRqVIlfH19uXz5sr3rEhERkVLGplASGRnJqVOn2Lx5M2lpaYSEhNi7LhERESllbAolx44dY9SoUbi6utKuXTtSU1PtXZeIiIiUMjaFkpycHC5cuIDJZMJsNuPkZNNsIiIiIjaz6eqb0aNH079/f86dO0ffvn0JCwuzd11STIr6AL+8DhU6Vg/7ExGRwtgUSk6fPs23337LhQsXqFSpEiaTyd51iYiISClj03GYlStXAuDt7X3HgeTPP/+kbdu2HDx4kKNHj9K/f38GDBjAxIkTyc3NvaNli4iISMllU09JZmYm3bt3x9fX13o+yezZs4u8sqysLCIjIylbtiwA06dPJzg4mICAACIjI4mPj6dDhw5FXq6IiIiUfIWGkvnz5/Paa68xduxYzp49ywMPPHBHK5sxYwb9+vUjOjoagH379uHv7w9AmzZt2Lx5s0LJPawo56vo/BMRkdKn0MM3P//8MwD+/v6sWrUKf39/67+iiouLw9vbm9atW1uHXX/SMIC7u7suNRYRESnFCu0psVgs+b6+HV988QUmk4mtW7eSlJRESEgIFy5csI5PS0ujQoUKBc6flJSU7/D09PQCx0nJpTYtOu0LxqB2KH5qA2O4nXYoNJTceFLrnZ7gunz5cuvroKAgJk2aRFRUFAkJCQQEBLBx40aaNWtW4PwNGjTId3hSUlKB4+6+wi95lbvHcW1673DsviAFUTsUP7WBMRTWDomJifkOLzSU7Nu3j379+mGxWPjjjz+sr00mEzExMXdccEhICBEREcyZMwc/Pz8CAwPveJkiIiJSMhUaStauXWuXlS5dutT6etmyZXZZh4iIiJQshYaSatWqOaoOkTuiK3tEREo+PcRGREREDEGhRERERAxBoUREREQMwabbzN+r7uyJuCIiInI3qadEREREDKFU95SIcakXS0Sk9FFPiYiIiBiCQomIiIgYgkKJiIiIGIJCiYiIiBiCQomIiIgYgkKJiIiIGIJCiYiIiBiC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\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x216 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "numeric_variables = [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"]\n",
    "for variable in numeric_variables:\n",
    "    plot_hist(variable)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"3\"></a><br>\n",
    "# Outlier Detection"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "def detect_outliers(df, features):\n",
    "    outlier_indices = []\n",
    "    \n",
    "    for c in features:\n",
    "        # 1st quartile\n",
    "        Q1 = np.percentile(df[c], 25)\n",
    "        # 3rd quartile\n",
    "        Q3 = np.percentile(df[c], 75)\n",
    "        # IQR\n",
    "        IQR = Q3 - Q1\n",
    "        # Outlier Step\n",
    "        outlier_step = IQR * 1.5\n",
    "        # detect outlier and their indices\n",
    "        outlier_list_col = df[(df[c] < Q1 - outlier_step) | (df[c] > Q3 + outlier_step)]. index\n",
    "        # store indices\n",
    "        outlier_indices.extend(outlier_list_col)\n",
    "    \n",
    "    # print() outlier_indices\n",
    "    outlier_indices = Counter(outlier_indices)\n",
    "    multiple_outliers = list((i for i, v in outlier_indices.items() if v > 2 ))\n",
    "    \n",
    "    return multiple_outliers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age, Label]\n",
       "Index: []"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.iloc[detect_outliers(data, [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"])]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* There is no double outlier varieble in database\n",
    "* We don't drop any varieble"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "# drop the outlier variables\n",
    "#data.drop(detect_outliers(data, [\"Pregnancies\",\"Glucose\",\"BloodPressure\",\"SkinThickness\",\"Insulin\",\"BMI\",\"DiabetesPedigreeFunction\",\"Age\"], axis=0)).reset_index(drop=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"4\"></a><br>\n",
    "# Missing Value\n",
    "* Find Missing Value\n",
    "* Fill Missing Value"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"5\"></a><br>\n",
    "## Find Missing Value\n",
    "\n",
    "* Missing value is 0 on this Database"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index([], dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns[data.isnull().any()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>6</td>\n",
       "      <td>148</td>\n",
       "      <td>72</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>33.6</td>\n",
       "      <td>0.627</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>85</td>\n",
       "      <td>66</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>26.6</td>\n",
       "      <td>0.351</td>\n",
       "      <td>31</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>183</td>\n",
       "      <td>64</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>23.3</td>\n",
       "      <td>0.672</td>\n",
       "      <td>32</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>89</td>\n",
       "      <td>66</td>\n",
       "      <td>23</td>\n",
       "      <td>94</td>\n",
       "      <td>28.1</td>\n",
       "      <td>0.167</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>40</td>\n",
       "      <td>35</td>\n",
       "      <td>168</td>\n",
       "      <td>43.1</td>\n",
       "      <td>2.288</td>\n",
       "      <td>33</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "0            6      148             72             35        0  33.6   \n",
       "1            1       85             66             29        0  26.6   \n",
       "2            8      183             64              0        0  23.3   \n",
       "3            1       89             66             23       94  28.1   \n",
       "4            0      137             40             35      168  43.1   \n",
       "\n",
       "   DiabetesPedigreeFunction  Age  Label  \n",
       "0                     0.627   50      1  \n",
       "1                     0.351   31      0  \n",
       "2                     0.672   32      1  \n",
       "3                     0.167   21      0  \n",
       "4                     2.288   33      1  "
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pregnancies                 111\n",
       "Glucose                       5\n",
       "BloodPressure                35\n",
       "SkinThickness               227\n",
       "Insulin                     374\n",
       "BMI                          11\n",
       "DiabetesPedigreeFunction      0\n",
       "Age                           0\n",
       "Label                       500\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data==0].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"6\"></a><br>\n",
    "## Fill Missing Value\n",
    "\n",
    "* Pregnancies variable include 0 value but its not missing value this mean she have never been pregnant so we don't change this\n",
    "* Glucose, BloodPressure, SkinThickness, Insulin, BMI has include missing values. Lets get fill this values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>75</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>48</td>\n",
       "      <td>20</td>\n",
       "      <td>0</td>\n",
       "      <td>24.7</td>\n",
       "      <td>0.140</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>20</td>\n",
       "      <td>23</td>\n",
       "      <td>27.7</td>\n",
       "      <td>0.299</td>\n",
       "      <td>21</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>342</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>68</td>\n",
       "      <td>35</td>\n",
       "      <td>0</td>\n",
       "      <td>32.0</td>\n",
       "      <td>0.389</td>\n",
       "      <td>22</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>349</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>80</td>\n",
       "      <td>32</td>\n",
       "      <td>0</td>\n",
       "      <td>41.0</td>\n",
       "      <td>0.346</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>502</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>68</td>\n",
       "      <td>41</td>\n",
       "      <td>0</td>\n",
       "      <td>39.0</td>\n",
       "      <td>0.727</td>\n",
       "      <td>41</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "75             1        0             48             20        0  24.7   \n",
       "182            1        0             74             20       23  27.7   \n",
       "342            1        0             68             35        0  32.0   \n",
       "349            5        0             80             32        0  41.0   \n",
       "502            6        0             68             41        0  39.0   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  Label  \n",
       "75                      0.140   22      0  \n",
       "182                     0.299   21      0  \n",
       "342                     0.389   22      0  \n",
       "349                     0.346   37      1  \n",
       "502                     0.727   41      1  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"Glucose\"] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=data[\"Age\"], y=data[\"Glucose\"])\n",
    "plt.xlabel(\"Age\")\n",
    "plt.ylabel(\"Glucose\")\n",
    "plt.title(\"Age - Glucose Distribution\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(x=data[\"BloodPressure\"], y=data[\"Glucose\"])\n",
    "plt.xlabel(\"BloodPressure\")\n",
    "plt.ylabel(\"Glucose\")\n",
    "plt.title(\"BloodPressure - Glucose Distribution\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 121\n"
     ]
    }
   ],
   "source": [
    "mean = int(np.mean(data[data[\"Glucose\"]!=0][\"Glucose\"]))\n",
    "print(\"Mean :\",mean)\n",
    "data[\"Glucose\"] = [i if i != 0 else mean for i in data[\"Glucose\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pregnancies</th>\n",
       "      <th>Glucose</th>\n",
       "      <th>BloodPressure</th>\n",
       "      <th>SkinThickness</th>\n",
       "      <th>Insulin</th>\n",
       "      <th>BMI</th>\n",
       "      <th>DiabetesPedigreeFunction</th>\n",
       "      <th>Age</th>\n",
       "      <th>Label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Pregnancies, Glucose, BloodPressure, SkinThickness, Insulin, BMI, DiabetesPedigreeFunction, Age, Label]\n",
       "Index: []"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"Glucose\"] == 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fill BloodPressure\n",
    "data[data[\"BloodPressure\"] == 0][\"BloodPressure\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 72\n"
     ]
    }
   ],
   "source": [
    "mean = int(np.mean(data[data[\"BloodPressure\"] != 0][\"BloodPressure\"]))\n",
    "print(\"Mean :\",mean)\n",
    "data[\"BloodPressure\"] = [i if i != 0 else mean for i in data[\"BloodPressure\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"BloodPressure\"] == 0][\"BloodPressure\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "227"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fill SkinThickness\n",
    "data[data[\"SkinThickness\"] == 0][\"SkinThickness\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 29\n"
     ]
    }
   ],
   "source": [
    "mean = int(np.mean(data[data[\"SkinThickness\"] != 0][\"SkinThickness\"]))\n",
    "print(\"Mean :\",mean)\n",
    "data[\"SkinThickness\"] = [i if i != 0 else mean for i in data[\"SkinThickness\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"SkinThickness\"] == 0][\"SkinThickness\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "374"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fill Insulin\n",
    "data[data[\"Insulin\"] == 0][\"Insulin\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 155\n"
     ]
    }
   ],
   "source": [
    "mean = int(np.mean(data[data[\"Insulin\"] != 0][\"Insulin\"]))\n",
    "print(\"Mean :\",mean)\n",
    "data[\"Insulin\"] = [i if i != 0 else mean for i in data[\"Insulin\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"Insulin\"] == 0][\"Insulin\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Fill BMI\n",
    "data[data[\"BMI\"] == 0][\"BMI\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean : 32\n"
     ]
    }
   ],
   "source": [
    "mean = int(np.mean(data[data[\"BMI\"] != 0][\"BMI\"]))\n",
    "print(\"Mean :\",mean)\n",
    "data[\"BMI\"] = [i if i != 0 else mean for i in data[\"BMI\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[data[\"BMI\"] == 0][\"BMI\"].count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"7\"></a><br>\n",
    "# Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "list1 = [\"Pregnancies\", \"Glucose\", \"BloodPressure\", \"SkinThickness\", \"Insulin\", \"BMI\", \"Label\"]\n",
    "sns.heatmap(data[list1].corr(), annot = True, fmt=\".2f\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Glucose and BMI features seems to have corelation with Label feature (0.49, 0.31)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"8\"></a><br>\n",
    "## Glucose Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"Glucose\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"Glucose\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"Glucose Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "* Diabetes Patient's glucose level more than not Diabetes Patient's"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"9\"></a><br>\n",
    "## Insulin Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"Insulin\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"Insulin\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"Insulin Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Diabetes Patient's Insulin Levels more than Non Diabetes Patient's"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"10\"></a><br>\n",
    "## BMI Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"BMI\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"BMI\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"BMI Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Diabetes Patient's BMI Values more than Non Diabetes Patient's"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"11\"></a><br>\n",
    "## BloodPressure Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"BloodPressure\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"BloodPressure\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"BloodPressure Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Diabetes Patient's Insulin Levels little more than Non Diabetes Patient's"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"12\"></a><br>\n",
    "## Pregnancies Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"Pregnancies\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"Pregnancies\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"Pregnancies Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lower pregnancy average is good about Diabetes"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"13\"></a><br>\n",
    "## SkinThickness Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"SkinThickness\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"SkinThickness\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"SkinThickness Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"14\"></a><br>\n",
    "## Age Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"Age\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"Age\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"Age Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Old people are under risk for Diabetes more than younger people"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"15\"></a><br>\n",
    "## DiabetesPedigreeFunction Mean -- Label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 0 = Non Diabetes , 1 = Diabetes\n",
    "zero_mean = data[data[\"Label\"] == 0][\"DiabetesPedigreeFunction\"].mean()\n",
    "one_mean = data[data[\"Label\"] == 1][\"DiabetesPedigreeFunction\"].mean()\n",
    "zero_count = data[data[\"Label\"]==0][\"Label\"].count()\n",
    "one_count = data[data[\"Label\"]==1][\"Label\"].count()\n",
    "g = sns.barplot(x=data[\"Label\"].value_counts().index, y=[zero_mean,one_mean], label=(\"0 count:\",zero_count,\"1 Count:\",one_count))\n",
    "g.set_ylabel(\"DiabetesPedigreeFunction Means\")\n",
    "g.legend()\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"16\"></a><br>\n",
    "# Modelling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split, StratifiedKFold, GridSearchCV\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.naive_bayes import GaussianNB"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"17\"></a><br>\n",
    "## Train - Test Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We will use this test data after select the model, parameters etc.\n",
    "\n",
    "test = data.iloc[700:]\n",
    "test_label= test[\"Label\"]\n",
    "test.drop(labels=[\"Label\"], axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "x_train size: 560\n",
      "y_train size: 560\n",
      "x_test size: 140\n",
      "y_test size: 140\n"
     ]
    }
   ],
   "source": [
    "train_df = data.iloc[:700]\n",
    "X_train = train_df.drop(labels=[\"Label\"], axis=1)\n",
    "Y_train = train_df[\"Label\"]\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(X_train, Y_train, test_size=0.2, random_state=42)\n",
    "print(f\"x_train size: {len(x_train)}\")\n",
    "print(f\"y_train size: {len(y_train)}\")\n",
    "print(f\"x_test size: {len(x_test)}\")\n",
    "print(f\"y_test size: {len(y_test)}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "GaussianNB Train Accuracy: % 75.89\n",
      "GaussianNB Test Accuracy: % 72.86\n"
     ]
    }
   ],
   "source": [
    "clf = GaussianNB()\n",
    "clf.fit(x_train,y_train)\n",
    "acc_clf_train = round(clf.score(x_train, y_train)*100, 2)\n",
    "acc_clf_test = round(clf.score(x_test, y_test)*100, 2)\n",
    "print(\"GaussianNB Train Accuracy: %\", acc_clf_train)\n",
    "print(\"GaussianNB Test Accuracy: %\", acc_clf_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id=\"21\"></a><br>\n",
    "## Predict Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7647058823529411\n"
     ]
    }
   ],
   "source": [
    "prediction = clf.predict(test)\n",
    "print(accuracy_score(prediction, test_label))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pickle\n",
    "# now you can save it to a file\n",
    "with open('GNB.pkl', 'wb') as f:\n",
    "    pickle.dump(clf, f)\n",
    "\n",
    "# and later you can load it\n",
    "with open('GNB.pkl', 'rb') as f:\n",
    "    GNB = pickle.load(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "test1= pd.DataFrame({'Pregnancies': [1], 'Glucose': [ 4],'BloodPressure': [3],'SkinThickness': [3],'Insulin': [4],'BMI': [40],'DiabetesPedigreeFunction': [33],'Age': [44]})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1] [1]\n"
     ]
    }
   ],
   "source": [
    "t1= GNB.predict(test1)\n",
    "t2 = clf.predict(test1)\n",
    "print(t1,t2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<bound method NDFrame.head of      Pregnancies  Glucose  BloodPressure  SkinThickness  Insulin   BMI  \\\n",
       "700            2      122             76             27      200  35.9   \n",
       "701            6      125             78             31      155  27.6   \n",
       "702            1      168             88             29      155  35.0   \n",
       "703            2      129             72             29      155  38.5   \n",
       "704            4      110             76             20      100  28.4   \n",
       "..           ...      ...            ...            ...      ...   ...   \n",
       "763           10      101             76             48      180  32.9   \n",
       "764            2      122             70             27      155  36.8   \n",
       "765            5      121             72             23      112  26.2   \n",
       "766            1      126             60             29      155  30.1   \n",
       "767            1       93             70             31      155  30.4   \n",
       "\n",
       "     DiabetesPedigreeFunction  Age  \n",
       "700                     0.483   26  \n",
       "701                     0.565   49  \n",
       "702                     0.905   52  \n",
       "703                     0.304   41  \n",
       "704                     0.118   27  \n",
       "..                        ...  ...  \n",
       "763                     0.171   63  \n",
       "764                     0.340   27  \n",
       "765                     0.245   30  \n",
       "766                     0.349   47  \n",
       "767                     0.315   23  \n",
       "\n",
       "[68 rows x 8 columns]>"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
